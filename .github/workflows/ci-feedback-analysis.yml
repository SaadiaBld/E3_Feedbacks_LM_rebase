name: CI/CD Feedback Analysis

on:
  push:
    branches:
      - main
      - ci-cd-tests
      - ci-tests
  pull_request:
    branches:
      - main
      - ci-cd-tests
      - ci-tests
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11'] # Standardiser sur une version

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Installer les dépendances de test, y compris airflow pour les tests de DAG
          pip install pytest pytest-cov pytest-mock apache-airflow

      - name: Run Unit Tests & Generate Coverage
        env:
          # On s'assure que les tests qui dépendent de secrets sont sautés
          # s'ils ne sont pas explicitement marqués comme intégration
          PYTEST_RUNNING: "true"
        run: |
          python -m pytest -v --cov=api --cov=scripts_data --cov-report=html --cov-report=term-missing -m "not integration"

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

      - name: Upload HTML Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: html-coverage-report
          path: htmlcov

      - name: Set up GCP Credentials
        if: github.ref == 'refs/heads/ci-tests'
        run: |
          mkdir -p config # Create the config directory
          echo "${{ secrets.GCP_CREDENTIALS_JSON }}" > config/trustpilot-satisfaction-43aac3dd82a9.json
          chmod 600 config/trustpilot-satisfaction-43aac3dd82a9.json # Set appropriate permissions
        env:
          GCP_CREDENTIALS_JSON: ${{ secrets.GCP_CREDENTIALS_JSON }}

      - name: Run Integration Tests (on main branch only)
        if: github.ref == 'refs/heads/ci-tests'
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          PYTEST_RUNNING: "true"
          GOOGLE_APPLICATION_CREDENTIALS: config/trustpilot-satisfaction-43aac3dd82a9.json # Point to the created file
        run: |
          # Start Docker Compose services
          docker compose up -d

          # Wait for Postgres to be ready
          echo "Waiting for Postgres to be ready..."
          until docker exec e3-feedbacks_lm-postgres-1 pg_isready -U airflow -d airflow; do
            sleep 1
          done
          echo "Postgres is ready."

          # Wait for Airflow Webserver to be healthy (optional, but good practice)
          echo "Waiting for Airflow Webserver to be healthy..."
          until curl --output /dev/null --silent --head --fail http://localhost:8080/health; do
            sleep 1
          done
          echo "Airflow Webserver is healthy."

          python -m pytest -v -m "integration"